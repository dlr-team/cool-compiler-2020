.data
data_0
.asciiz "Abort called from class "
data_1
.asciiz "\n"
data_2
.asciiz "\n"
data_3
.asciiz "Invalid substring start"
data_4
.asciiz "Invalid substring length"
data_5
.asciiz "Invalid substring"
data_6
.asciiz "Hello, World.n"
.text
main:
jal entry

li $v0, 10
syscall
function_abort_at_Object:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
# TypeNameNode
lw $t0, 8($fp)
lw $t1, 4($t0)
sw $t1, 4($fp)
la $s0, data_0
lw $s1, 4($fp)
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 8($fp)
lw $s0, 8($fp)
la $s1, data_1
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 12($fp)
lw $a0, 12($fp)
li $v0, 4
syscall
li $v0, 10
syscall


lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 12
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_copy_at_Object:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
la $s1, -4($fp)
li $s3, 0
move $t0, $s0
move $t1, $s1
move $t3, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
addi $t0, $t0, 2
addi $t1, $t1, 2
addi $t3, $t3, -1
beqz $t3, mip_label_0
j mip_label_0
mip_label_0:
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_type_name_at_Object:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
# TypeOfNode
lw $s0, 8($fp)
lw $s1, $s0
sw $s1, 8($fp)
# TypeNameNode
lw $t0, 8($fp)
lw $t1, 4($t0)
sw $t1, 4($fp)
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_length_at_String:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
# LengthNode
lw $s1, 8($fp)
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s0, $t1
sw $s0, 4($fp)
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_concat_at_String:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
lw $s0, 8($fp)
lw $s1, 12($fp)
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 4($fp)
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_substr_at_String:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
li $s0, 0
sw $s0, 16($fp)
# LengthNode
lw $s1, 8($fp)
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s0, $t1
sw $s0, 12($fp)
lw $t0, 16($fp)
lw $t1, 12($fp)
slt $t2, $t1, $t0
li $t3, 1
sub $t0, $t3, $t2
sw $t0, 24($fp)
# IfGotoNode
lw $t0, 24($fp)
li $t1, 0
bne $t0, $t1, error1
la $s0, data_3
la $s1, data_2
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 36($fp)
lw $a0, 36($fp)
li $v0, 4
syscall
# ErrorNode
li $a0, 1
li $v0, 17
syscall
error1:
lw $t0, 16($fp)
lw $t1, 16($fp)
slt $t2, $t1, $t0
li $t3, 1
sub $t0, $t3, $t2
sw $t0, 28($fp)
# IfGotoNode
lw $t0, 28($fp)
li $t1, 0
bne $t0, $t1, error2
la $s0, data_4
la $s1, data_2
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 36($fp)
lw $a0, 36($fp)
li $v0, 4
syscall
# ErrorNode
li $a0, 1
li $v0, 17
syscall
error2:
lw $t0, 12($fp)
lw $t1, 16($fp)
add $t2, $t0, $t1
sw $t2, 20($fp)
lw $t0, 20($fp)
lw $t1, 12($fp)
slt $t2, $t1, $t0
li $t3, 1
sub $t0, $t3, $t2
sw $t0, 32($fp)
# IfGotoNode
lw $t0, 32($fp)
li $t1, 0
bne $t0, $t1, error3
la $s0, data_5
la $s1, data_2
move $t0, $s0
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s4, $t1
move $t0, $s1
li $t1, 0
mip_label_0:
lb $t3, 0($t0)
beqz $t3, mip_label_0
addi $t1, $t1, 1
addi $t0, $t0, 1
j mip_label_0
mip_label_0:
move $s5, $t1
add $a0, $s4, $s5
li $v0, 9
syscall
move $s3, $v0
move $t0, $s0
move $t1, $s3
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
move $t0, $s1
move $t1, $v0
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
beqz $t2, mip_label_0
addi $t0, $t0, 1
addi $t1, $t1, 1
j mip_label_0
mip_label_0:
move $v0, $t1
sw $s3, 36($fp)
lw $a0, 36($fp)
li $v0, 4
syscall
# ErrorNode
li $a0, 1
li $v0, 17
syscall
error3:
lw $s0, 8($fp)
lw $s1, 16($fp)
lw $s3, 12($fp)
add $s0, $s0, $s3
move $a0, $s1
li $v0, 9
syscall
move $t0, $s0
move $t1, $v0
move $t3, $s1
mip_label_0:
lb $t2, 0($t0)
sb $t2, 0($t1)
addi $t0, $t0, 1
addi $t1, $t1, 1
addi $t3, $t3, -1
beqz $t3, mip_label_0
j mip_label_0
mip_label_0:
move $t2, $zero
sb $t2, 0($t1)
sw $v0, 4($fp)
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 36
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_out_string_at_IO:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
lw $a0, 4($fp)
li $v0, 4
syscall

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_in_string_at_IO:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
li $a0, 1024
li $v0, 9
syscall
move $a0, $v0
sw $v0, 4($fp)
li $a1, 1024
li $v0, 8
syscall
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_out_int_at_IO:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
lw $a0, 8($fp)
li $v0, 1
syscall

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 0
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_in_int_at_IO:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
li $v0, 5
syscall
sw $v0, 4($fp)
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 4
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
entry:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
li $a0, 40
li $v0, 9
syscall
move $s1, $v0
sw $s1, 4($fp)
li $s0, 3
sw $s0, $s1
la $s0, 
sw $s0, 4($v0)
li $s0, 40
sw $s0, 8($s1)
la $s0, function_abort_at_Object
sw $s0, 8($s1)
la $s0, function_type_name_at_Object
sw $s0, 12($s1)
la $s0, function_copy_at_Object
sw $s0, 16($s1)
la $s0, function_out_string_at_IO
sw $s0, 20($s1)
la $s0, function_out_int_at_IO
sw $s0, 24($s1)
la $s0, function_in_string_at_IO
sw $s0, 28($s1)
la $s0, function_in_int_at_IO
sw $s0, 32($s1)
la $s0, function_main_at_Main
sw $s0, 36($s1)
# ArgNode
lw $s0, 4($fp)
addi $sp, $sp, -4
sw $s0, 0($sp)
# StaticCallNode
jal function_main_at_Main
sw $v0, 8($fp)
addi $sp, $sp, 4

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra
function_main_at_Main:
# Set stack frame
addi $sp, $sp, -4
sw $fp, 0($sp)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $zero, 0($sp)
addi $sp, $sp, -4
sw $ra, 0($sp)
addi $sp, $sp, -4
sw $s0, 0($sp)
addi $sp, $sp, -4
sw $s1, 0($sp)
addi $sp, $sp, -4
sw $s2, 0($sp)
addi $sp, $sp, -4
sw $s3, 0($sp)
addi $sp, $sp, -4
sw $s4, 0($sp)
addi $sp, $sp, -4
sw $s5, 0($sp)
addi $sp, $sp, -4
sw $s6, 0($sp)
addi $sp, $sp, -4
sw $s7, 0($sp)

# Generating body code
la $s0, data_6
# ArgNode
lw $s0, 8($fp)
addi $sp, $sp, -4
sw $s0, 0($sp)
# ArgNode
lw $s0, 8($fp)
addi $sp, $sp, -4
sw $s0, 0($sp)
# DynamicCallNode
lw $s0, 8($fp)
lw $s1, 20($s0)
jalr $s1
sw $v0, 4($fp)
addi $sp, $sp, 8
# ReturnNode
lw $v0, 4($fp)

lw $s7, 0($sp)
addi $sp, $sp, 4
lw $s6, 0($sp)
addi $sp, $sp, 4
lw $s5, 0($sp)
addi $sp, $sp, 4
lw $s4, 0($sp)
addi $sp, $sp, 4
lw $s3, 0($sp)
addi $sp, $sp, 4
lw $s2, 0($sp)
addi $sp, $sp, 4
lw $s1, 0($sp)
addi $sp, $sp, 4
lw $s0, 0($sp)
addi $sp, $sp, 4
lw $ra, 0($sp)
addi $sp, $sp, 4
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $fp, 0($sp)
addi $sp, $sp, 4
jr $ra