.data
data_0
.asciiz "H"
data_1
.asciiz "A"
data_2
.asciiz "B"
data_3
.asciiz "C"
data_4
.asciiz "E"
.text
main:
jal entry

li $v0, 10
syscall
function_abort_at_Object:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ErrorNode
li $a0, 1
li $v0, 17
syscall

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 0
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_copy_at_Object:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_length_at_String:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_concat_at_String:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_substr_at_String:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_out_string_at_IO:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $a0, $t8, $t9
li $v0, 4
syscall

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_in_string_at_IO:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_out_int_at_IO:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $a0, $t8, $t9
li $v0, 4
syscall

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_in_int_at_IO:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, -8($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 16
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
entry:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
li $a0, 8
li $v0, 9
syscall
srl $t9, $v0, 16
sw $t9, 0($t8)
sw $v0, 4($t8)
li $t0, 3
srl $t9, $t0, 16
sw $t9, 0($t8)
sw $t0, 4($t8)
srl $t9, $t0, 16
sw $t9, 0($t8)
sw $t0, 4($t8)
# ArgNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $t0, $t8, $t9
addi $sp, $sp, -8
srl $t9, $t0, 16
sw $t9, 0($t8)
sw $t0, 4($t8)
# StaticCallNode
jal function_main_at_Main

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 16
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_main_at_Main:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_m_at_A:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_f_at_A:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
li $a0, 8
li $v0, 9
syscall
srl $t9, $v0, 16
sw $t9, 0($t8)
sw $v0, 4($t8)
li $t0, 4
srl $t9, $t0, 16
sw $t9, 0($t8)
sw $t0, 4($t8)
srl $t9, $t0, 16
sw $t9, 0($t8)
sw $t0, 4($t8)
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_m_at_B:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_f_at_C:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra
function_f_at_E:
# Set stack frame
addi $sp, $sp, -8
srl $t9, $fp, 16
sw $t9, 0($t8)
sw $fp, 4($t8)
move $fp, $sp

# Allocate memory for Local variables
addi $sp, $sp, -8
srl $t9, $zero, 16
sw $t9, 0($t8)
sw $zero, 4($t8)
addi $sp, $sp, -8
srl $t9, $ra, 16
sw $t9, 0($t8)
sw $ra, 4($t8)
# Generating body code
# ReturnNode
lw $t8, 0($fp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $v0, $t8, $t9

lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $ra, $t8, $t9
addi $sp, $sp, 8
# Clean stack variable space
addi $sp, $sp, 8
# Return
lw $t8, 0($sp)
sll $t8, $t8, 16
addi $t7, $t7, 4
lw $t9, 0($t7)
or $fp, $t8, $t9
addi $sp, $sp, 8
jr $ra[]