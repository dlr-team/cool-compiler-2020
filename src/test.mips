.TYPES
type Object {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
}
type String {
	attribute value

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method length: function_length_at_String
	method concat: function_concat_at_String
	method substr: function_substr_at_String
}
type IO {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
}
type Int {
	attribute value

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
}
type Bool {
	attribute value

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
}
type A {
	attribute io

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_a: function_out_a_at_A
}
type C {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method out_c: function_out_c_at_C
}
type Main {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method main: function_main_at_Main
}
type B {
	attribute io

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_a: function_out_a_at_A
	method out_b: function_out_b_at_B
}
type D {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method out_c: function_out_c_at_C
	method out_d: function_out_d_at_D
}

.DATA
data_0 = "Abort called from class "
data_1 = "\n"
data_2 = "Invalid substring start"
data_3 = "Invalid substring length"
data_4 = "Invalid substring"
data_5 = "A: Hello world
"
data_6 = "C: Hello world
"
data_7 = "Done.
"
data_8 = "B: Hello world
"
data_9 = "D: Hello world
"

.CODE
function function_abort_at_Object {
	PARAM self

	LOCAL local_abort_at_Object_internal_0
	LOCAL local_abort_at_Object_internal_1
	LOCAL local_abort_at_Object_internal_2

	local_abort_at_Object_internal_0 = TYPENAME self
	local_abort_at_Object_internal_1 = CONCAT data_0 local_abort_at_Object_internal_0
	local_abort_at_Object_internal_2 = CONCAT local_abort_at_Object_internal_1 data_1
	PRINTSTR local_abort_at_Object_internal_2
	ABORT
}
function function_copy_at_Object {
	PARAM self

	LOCAL local_copy_at_Object_internal_0

	local_copy_at_Object_internal_0 = COPY self
	RETURN local_copy_at_Object_internal_0
}
function function_type_name_at_Object {
	PARAM self

	LOCAL local_type_name_at_Object_internal_0
	LOCAL local_type_name_at_Object_internal_1

	local_type_name_at_Object_internal_1 = TYPEOF self
	local_type_name_at_Object_internal_0 = TYPENAME local_type_name_at_Object_internal_1
	RETURN local_type_name_at_Object_internal_0
}
function function_length_at_String {
	PARAM self

	LOCAL local_length_at_String_internal_0

	local_length_at_String_internal_0 = LENGTH self
	RETURN local_length_at_String_internal_0
}
function function_concat_at_String {
	PARAM self
	PARAM string

	LOCAL local_concat_at_String_internal_0

	local_concat_at_String_internal_0 = CONCAT self string
	RETURN local_concat_at_String_internal_0
}
function function_substr_at_String {
	PARAM self
	PARAM start
	PARAM length

	LOCAL local_substr_at_String_internal_0
	LOCAL local_substr_at_String_internal_1
	LOCAL local_substr_at_String_internal_2
	LOCAL local_substr_at_String_internal_3
	LOCAL local_substr_at_String_internal_4
	LOCAL local_substr_at_String_internal_5
	LOCAL local_substr_at_String_internal_6
	LOCAL local_substr_at_String_internal_7
	LOCAL local_substr_at_String_internal_8

	local_substr_at_String_internal_3 = 0
	local_substr_at_String_internal_2 = LENGTH self
	local_substr_at_String_internal_5 = local_substr_at_String_internal_3 <= start
	IF local_substr_at_String_internal_5 GOTO error1
	local_substr_at_String_internal_8 = CONCAT data_2 data_1
	PRINTSTR local_substr_at_String_internal_8
	ERROR 0
	LABEL error1
	local_substr_at_String_internal_6 = local_substr_at_String_internal_3 <= length
	IF local_substr_at_String_internal_6 GOTO error2
	local_substr_at_String_internal_8 = CONCAT data_3 data_1
	PRINTSTR local_substr_at_String_internal_8
	ERROR 0
	LABEL error2
	local_substr_at_String_internal_4 = start + length
	local_substr_at_String_internal_7 = local_substr_at_String_internal_4 <= local_substr_at_String_internal_2
	IF local_substr_at_String_internal_7 GOTO error3
	local_substr_at_String_internal_8 = CONCAT data_4 data_1
	PRINTSTR local_substr_at_String_internal_8
	ERROR 0
	LABEL error3
	local_substr_at_String_internal_0 = SUBSTRING self start length
	RETURN local_substr_at_String_internal_0
}
function function_out_string_at_IO {
	PARAM self
	PARAM str_val

	

	PRINTSTR str_val
	RETURN self
}
function function_in_string_at_IO {
	

	LOCAL local_in_string_at_IO_internal_0

	local_in_string_at_IO_internal_0 = READSTR
	RETURN local_in_string_at_IO_internal_0
}
function function_out_int_at_IO {
	PARAM self
	PARAM int_val

	

	PRINTINT int_val
	RETURN self
}
function function_in_int_at_IO {
	

	LOCAL local_in_int_at_IO_internal_0

	local_in_int_at_IO_internal_0 = READINT
	RETURN local_in_int_at_IO_internal_0
}
function ctor_IO {
	PARAM self

	

	RETURN self
}
function ctor_Int {
	PARAM self

	LOCAL local__internal_0

	VOID
	SETATTR value OF self_Int = local__internal_0
	RETURN self
}
function ctor_String {
	PARAM self

	LOCAL local_ng_internal_0

	VOID
	SETATTR value OF self_String = local_ng_internal_0
	RETURN self
}
function ctor_Bool {
	PARAM self

	LOCAL local__internal_0

	VOID
	SETATTR value OF self_Bool = local__internal_0
	RETURN self
}
function ctor_Object {
	PARAM self

	

	RETURN self
}
function ctor_A {
	PARAM self

	LOCAL local__internal_0

	local__internal_0 = ALLOCATE IO
	ARG local__internal_0
	local__internal_0 = CALL ctor_IO
	SETATTR io OF self_A = local__internal_0
	RETURN self
}
function ctor_C {
	PARAM self

	

	RETURN self
}
function ctor_Main {
	PARAM self

	

	RETURN self
}
function ctor_B {
	PARAM self

	LOCAL local__internal_0

	local__internal_0 = ALLOCATE IO
	ARG local__internal_0
	local__internal_0 = CALL ctor_IO
	SETATTR io OF self_B = local__internal_0
	RETURN self
}
function ctor_D {
	PARAM self

	

	RETURN self
}
function entry {
	

	LOCAL local__internal_0
	LOCAL local__internal_1

	local__internal_0 = ALLOCATE Main
	ARG local__internal_0
	local__internal_1 = CALL function_main_at_Main
	CLEAR 1 ARGS
}
function function_out_a_at_A {
	PARAM self

	LOCAL local_out_a_at_A_internal_0
	LOCAL local_out_a_at_A_internal_1
	LOCAL local_out_a_at_A_internal_2

	local_out_a_at_A_internal_1 = LOAD data_5
	ARG local_out_a_at_A_internal_1
	local_out_a_at_A_internal_2 = GETATTR self io
	ARG local_out_a_at_A_internal_2
	local_out_a_at_A_internal_0 = VCALL IO out_string
	CLEAR 2 ARGS
	RETURN local_out_a_at_A_internal_0
}
function function_out_c_at_C {
	PARAM self

	LOCAL local_out_c_at_C_internal_0
	LOCAL local_out_c_at_C_internal_1

	local_out_c_at_C_internal_1 = LOAD data_6
	ARG local_out_c_at_C_internal_1
	ARG self
	local_out_c_at_C_internal_0 = VCALL C out_string
	CLEAR 2 ARGS
	RETURN local_out_c_at_C_internal_0
}
function function_main_at_Main {
	PARAM self

	LOCAL local_main_at_Main_internal_0
	LOCAL local_main_at_Main_internal_1
	LOCAL local_main_at_Main_internal_2
	LOCAL local_main_at_Main_internal_3
	LOCAL local_main_at_Main_internal_4
	LOCAL local_main_at_Main_internal_5
	LOCAL local_main_at_Main_internal_6
	LOCAL local_main_at_Main_internal_7
	LOCAL local_main_at_Main_internal_8
	LOCAL local_main_at_Main_internal_9

	local_main_at_Main_internal_1 = ALLOCATE A
	ARG local_main_at_Main_internal_1
	local_main_at_Main_internal_1 = CALL ctor_A
	ARG local_main_at_Main_internal_1
	local_main_at_Main_internal_0 = VCALL A out_a
	CLEAR 1 ARGS
	local_main_at_Main_internal_3 = ALLOCATE B
	ARG local_main_at_Main_internal_3
	local_main_at_Main_internal_3 = CALL ctor_B
	ARG local_main_at_Main_internal_3
	local_main_at_Main_internal_2 = VCALL B out_b
	CLEAR 1 ARGS
	local_main_at_Main_internal_5 = ALLOCATE C
	ARG local_main_at_Main_internal_5
	local_main_at_Main_internal_5 = CALL ctor_C
	ARG local_main_at_Main_internal_5
	local_main_at_Main_internal_4 = VCALL C out_c
	CLEAR 1 ARGS
	local_main_at_Main_internal_7 = ALLOCATE D
	ARG local_main_at_Main_internal_7
	local_main_at_Main_internal_7 = CALL ctor_D
	ARG local_main_at_Main_internal_7
	local_main_at_Main_internal_6 = VCALL D out_d
	CLEAR 1 ARGS
	local_main_at_Main_internal_9 = LOAD data_7
	ARG local_main_at_Main_internal_9
	ARG self
	local_main_at_Main_internal_8 = VCALL Main out_string
	CLEAR 2 ARGS
	RETURN local_main_at_Main_internal_8
}
function function_out_b_at_B {
	PARAM self

	LOCAL local_out_b_at_B_internal_0
	LOCAL local_out_b_at_B_internal_1
	LOCAL local_out_b_at_B_internal_2

	local_out_b_at_B_internal_1 = LOAD data_8
	ARG local_out_b_at_B_internal_1
	local_out_b_at_B_internal_2 = GETATTR self io
	ARG local_out_b_at_B_internal_2
	local_out_b_at_B_internal_0 = VCALL IO out_string
	CLEAR 2 ARGS
	RETURN local_out_b_at_B_internal_0
}
function function_out_d_at_D {
	PARAM self

	LOCAL local_out_d_at_D_internal_0
	LOCAL local_out_d_at_D_internal_1

	local_out_d_at_D_internal_1 = LOAD data_9
	ARG local_out_d_at_D_internal_1
	ARG self
	local_out_d_at_D_internal_0 = VCALL D out_string
	CLEAR 2 ARGS
	RETURN local_out_d_at_D_internal_0
}