.TYPES
type Object {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
}
type String {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method length: function_length_at_String
	method concat: function_concat_at_String
	method substr: function_substr_at_String
}
type IO {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
}
type Main {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method out_string: function_out_string_at_IO
	method out_int: function_out_int_at_IO
	method in_string: function_in_string_at_IO
	method in_int: function_in_int_at_IO
	method main: function_main_at_Main
}
type A {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method m: function_m_at_A
	method f: function_f_at_A
}
type B {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method m: function_m_at_B
	method f: function_f_at_A
}
type C {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method f: function_f_at_C
}
type D {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method f: function_f_at_C
}
type E {
	

	method abort: function_abort_at_Object
	method type_name: function_type_name_at_Object
	method copy: function_copy_at_Object
	method f: function_f_at_E
}

.DATA
data_0 = "A"
data_1 = "B"
data_2 = "C"
data_3 = "E"

.CODE
function function_abort_at_Object {
	PARAM self

	

	ERROR 0
}
function function_copy_at_Object {
	PARAM self

	LOCAL local_copy_at_Object_internal_0

	local_copy_at_Object_internal_0 = COPY self
}
function function_type_name_at_Object {
	PARAM self

	LOCAL local_type_name_at_Object_internal_0
	LOCAL local_type_name_at_Object_internal_1

	local_type_name_at_Object_internal_1 = TYPEOF self
	local_type_name_at_Object_internal_0 = TYPENAME local_type_name_at_Object_internal_1
}
function function_length_at_String {
	PARAM self

	LOCAL local_length_at_String_internal_0

	local_length_at_String_internal_0 = LENGTH self
	RETURN local_length_at_String_internal_0
}
function function_concat_at_String {
	PARAM self
	PARAM string

	LOCAL local_concat_at_String_internal_0

	local_concat_at_String_internal_0 = CONCAT self string
	RETURN local_concat_at_String_internal_0
}
function function_substr_at_String {
	PARAM self
	PARAM start
	PARAM length

	LOCAL local_substr_at_String_internal_0

	local_substr_at_String_internal_0 = SUBSTRING self start length
	RETURN local_substr_at_String_internal_0
}
function function_out_string_at_IO {
	PARAM self

	LOCAL local_out_string_at_IO_internal_0

	PRINT local_out_string_at_IO_internal_0
	RETURN self
}
function function_in_string_at_IO {
	PARAM self

	LOCAL local_in_string_at_IO_internal_0

	local_in_string_at_IO_internal_0 = READ
	RETURN self
}
function function_out_int_at_IO {
	PARAM self
	PARAM int_val

	LOCAL local_out_int_at_IO_internal_0

	local_out_int_at_IO_internal_0 = STR int_val
	PRINT local_out_int_at_IO_internal_0
	RETURN self
}
function function_in_int_at_IO {
	PARAM self

	LOCAL local_in_int_at_IO_internal_0
	LOCAL local_in_int_at_IO_internal_1

	local_in_int_at_IO_internal_0 = READ
	local_in_int_at_IO_internal_1 = INT local_in_int_at_IO_internal_0
	RETURN self
}
function entry {
	

	LOCAL local__internal_0
	LOCAL local__internal_1

	Main = ALLOCATE local__internal_0
	ARG local__internal_0
	local__internal_1 = CALL function_main_at_Main
	RETURN 0
}
function function_main_at_Main {
	

	LOCAL local_main_at_Main_internal_0
	LOCAL local_main_at_Main_internal_1
	LOCAL local_main_at_Main_internal_2
	LOCAL local_main_at_Main_internal_3
	LOCAL local_main_at_Main_internal_4
	LOCAL local_main_at_Main_internal_5
	LOCAL local_main_at_Main_internal_6
	LOCAL local_main_at_Main_internal_7
	LOCAL local_main_at_Main_internal_8
	LOCAL local_main_at_Main_internal_9
	LOCAL local_main_at_Main_internal_10
	LOCAL local_main_at_Main_internal_11
	LOCAL local_main_at_Main_internal_12
	LOCAL local_main_at_Main_internal_13
	LOCAL local_main_at_Main_internal_14
	LOCAL local_main_at_Main_internal_15

	local_main_at_Main_internal_1 = ALLOCATE type E : D {
	[method] f(): String;
}

	ARG ('x', 'E')
	local_main_at_Main_internal_4 = CALL function_f_at_E
	ARG ('x', 'E')
	local_main_at_Main_internal_5 = CALL function_f_at_E
	local_main_at_Main_internal_3 = local_main_at_Main_internal_4 == local_main_at_Main_internal_5
	local_main_at_Main_internal_2 = local_main_at_Main_internal_3
	local_main_at_Main_internal_6 = ALLOCATE type B : A {
	[method] m(): String;
}

	ARG ('x', 'E')
	local_main_at_Main_internal_10 = CALL function_f_at_A
	ARG local_main_at_Main_internal_10
	local_main_at_Main_internal_9 = CALL function_m_at_A
	ARG local_main_at_Main_internal_9
	ARG self
	local_main_at_Main_internal_8 = VCALL Main out_string
	local_main_at_Main_internal_7 = local_main_at_Main_internal_8
	local_main_at_Main_internal_11 = ALLOCATE type A : Object {
	[method] m(): String;
	[method] f(): A;
}

	ARG ('x', 'E')
	local_main_at_Main_internal_15 = CALL function_f_at_A
	ARG local_main_at_Main_internal_15
	local_main_at_Main_internal_14 = CALL function_m_at_A
	ARG local_main_at_Main_internal_14
	ARG self
	local_main_at_Main_internal_13 = VCALL Main out_string
	local_main_at_Main_internal_12 = local_main_at_Main_internal_13
	local_main_at_Main_internal_0 = local_main_at_Main_internal_12
	RETURN local_main_at_Main_internal_0
}
function function_m_at_A {
	

	

	RETURN ('A', 'data_0')
}
function function_f_at_A {
	

	LOCAL local_f_at_A_internal_0

	local_f_at_A_internal_0 = ALLOCATE type A : Object {
	[method] m(): String;
	[method] f(): A;
}

	RETURN ('local_f_at_A_internal_0', type A : Object {
	[method] m(): String;
	[method] f(): A;
}
)
}
function function_m_at_B {
	

	

	RETURN ('B', 'data_1')
}
function function_f_at_C {
	

	

	RETURN ('C', 'data_2')
}
function function_f_at_E {
	

	

	RETURN ('E', 'data_3')
}